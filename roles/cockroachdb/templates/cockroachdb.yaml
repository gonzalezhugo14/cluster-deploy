{% if k8s_cockroachdb_secure %}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cockroachdb
  namespace: {{ k8s_cockroachdb_namespace }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cockroachdb-clusterrole
rules:
  # allow global access to manage certs
  - apiGroups:
    - certificates.k8s.io
    resources:
    - certificatesigningrequests
    verbs:
    - create
    - watch

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cockroachdb-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cockroachdb-clusterrole
subjects:
  - kind: ServiceAccount
    name: cockroachdb
    namespace: {{ k8s_cockroachdb_namespace }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cockroachdb-role
  namespace: {{ k8s_cockroachdb_namespace }}
rules:
  # allow access to manage secrets
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - create
    - get

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cockroachdb-rolebinding
  namespace: {{ k8s_cockroachdb_namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cockroachdb-role
subjects:
  - kind: ServiceAccount
    name: cockroachdb
    namespace: {{ k8s_cockroachdb_namespace }}

{% endif %}
---

apiVersion: v1
kind: Service
metadata:
  # This service is meant to be used by clients of the database. It exposes a ClusterIP that will
  # automatically load balance connections to the different database pods.
  name: cockroachdb-public
  namespace: {{ k8s_cockroachdb_namespace }}
  labels:
    app: cockroachdb
spec:
  ports:
  # The main port, served by gRPC, serves Postgres-flavor SQL, internode
  # traffic and the cli.
  - port: 26257
    targetPort: 26257
    name: grpc
  # The secondary port serves the UI as well as health and debug endpoints.
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: cockroachdb

---

apiVersion: v1
kind: Service
metadata:
  # This service only exists to create DNS entries for each pod in the stateful
  # set such that they can resolve each other's IP addresses. It does not
  # create a load-balanced ClusterIP and should not be used directly by clients
  # in most circumstances.
  name: cockroachdb
  namespace: {{ k8s_cockroachdb_namespace }}
  labels:
    app: cockroachdb
  annotations:
    # This is needed to make the peer-finder work properly and to help avoid
    # edge cases where instance 0 comes up after losing its data and needs to
    # decide whether it should create a new cluster or try to join an existing
    # one. If it creates a new cluster when it should have joined an existing
    # one, we'd end up with two separate clusters listening at the same service
    # endpoint, which would be very bad.
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    # Enable automatic monitoring of all instances when Prometheus is running in the cluster.
    prometheus.io/scrape: "true"
    prometheus.io/path: "_status/vars"
    prometheus.io/port: "8080"
spec:
  ports:
  - port: 26257
    targetPort: 26257
    name: grpc
  - port: 8080
    targetPort: 8080
    name: http
  clusterIP: None
  selector:
    app: cockroachdb

---

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: cockroachdb-budget
  namespace: {{ k8s_cockroachdb_namespace }}
  labels:
    app: cockroachdb
spec:
  selector:
    matchLabels:
      app: cockroachdb
  maxUnavailable: 1

---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: cockroachdb
  namespace: {{ k8s_cockroachdb_namespace }}
spec:
  serviceName: "cockroachdb"
  replicas: {{ k8s_node_hosts | count }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cockroachdb
    spec:
{% if k8s_cockroachdb_secure %}
      serviceAccountName: cockroachdb
      # Init containers are run only once in the lifetime of a pod, before
      # it's started up for the first time. It has to exit successfully
      # before the pod's main containers are allowed to start.
      initContainers:
      # The init-certs container sends a certificate signing request to the
      # kubernetes cluster.
      # You can see pending requests using: kubectl get csr
      # CSRs can be approved using:         kubectl certificate approve <csr name>
      #
      # All addresses used to contact a node must be specified in the --addresses arg.
      #
      # In addition to the node certificate and key, the init-certs entrypoint will symlink
      # the cluster CA to the certs directory.
      - name: init-certs
        image: {{ k8s_cockroachdb_request_cert_image }}:{{ k8s_cockroachdb_request_cert_image_tag }}
        imagePullPolicy: IfNotPresent
{% if k8s_cockroachdb_privileged %}
        securityContext:
          privileged: true
{% endif %}
        command:
        - "/bin/ash"
        - "-ecx"
        - "/request-cert -namespace=${POD_NAMESPACE} -certs-dir=/cockroach-certs -type=node -addresses=localhost,127.0.0.1,${POD_IP},$(hostname -f),$(hostname -f|cut -f 1-2 -d '.'),cockroachdb-public,cockroachdb-public.{{ k8s_cockroachdb_namespace }},cockroachdb-public.{{ k8s_cockroachdb_namespace }}.svc.{{ k8s_cluster_domain }} -symlink-ca-from=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: certs
          mountPath: /cockroach-certs
{% endif %}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cockroachdb
              topologyKey: kubernetes.io/hostname
      containers:
      - name: cockroachdb
        image: {{ k8s_cockroachdb_image }}:{{ k8s_cockroachdb_image_tag }}
        imagePullPolicy: IfNotPresent
{% if k8s_cockroachdb_privileged %}
        securityContext:
          privileged: true
{% endif %}
        ports:
        - containerPort: 26257
          name: grpc
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: datadir
          mountPath: /cockroach/cockroach-data
{% if k8s_cockroachdb_secure %}
        - name: certs
          mountPath: /cockroach/cockroach-certs
{% endif %}
        command:
          - "/bin/bash"
          - "-ecx"
          # The use of qualified `hostname -f` is crucial:
          # Other nodes aren't able to look up the unqualified hostname.
          - "exec /cockroach/cockroach start --logtostderr {% if k8s_cockroachdb_secure %}--certs-dir /cockroach/cockroach-certs{% else %}--insecure{% endif %} --host $(hostname -f) --http-host 0.0.0.0 --join {% for host in k8s_node_hosts %}cockroachdb-{{ loop.index0 }}.cockroachdb{% if not loop.last %},{% endif %}{% endfor %} --cache {{ k8s_cockroachdb_cache_size }} --max-sql-memory {{ k8s_cockroachdb_max_sql_memory }}"
      # No pre-stop hook is required, a SIGTERM plus some time is all that's
      # needed for graceful shutdown of a node.
      terminationGracePeriodSeconds: 60
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: datadir
{% if k8s_cockroachdb_secure %}
      - name: certs
        emptyDir: {}
{% endif %}
  volumeClaimTemplates:
  - metadata:
      name: datadir
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ k8s_cockroachdb_volume_size }}

{% if not k8s_cockroachdb_secure %}
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cockroachdb
  namespace: {{ k8s_cockroachdb_namespace }}
  labels:
    app: cockroachdb
spec:
  tls:
  - hosts:
    - {{ k8s_services_name }}
    secretName: tls-secret
  rules:
  - host: {{ k8s_services_name }}
    http:
      paths:
      - path: /
        backend:
          serviceName: cockroachdb-public
          servicePort: 8080
{% endif %}
