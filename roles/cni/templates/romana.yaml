---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: romana-listener
rules:
- apiGroups:
  - "*"
  resources:
  - pods
  - namespaces
  - nodes
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "*"
  resources:
  - services
  verbs:
  - update
  - list
  - watch

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: romana-agent
rules:
- apiGroups:
  - "*"
  resources:
  - pods
  - nodes
  verbs:
  - get

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: romana-listener
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: romana-listener
subjects:
- kind: ServiceAccount
  name: romana-listener
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: romana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: romana-agent
subjects:
- kind: ServiceAccount
  name: romana-agent
  namespace: kube-system

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: romana-listener
  namespace: kube-system

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: romana-agent
  namespace: kube-system

---

# This ConfigMap can be used to configure a self-hosted Romana installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: romama-config
  namespace: kube-system
data:
  network_config: |-
    {
      "networks": [
        {
          "name": "romana-network",
          "cidr": "{{ k8s_cluster_cidr }}",
          "block_mask": 29
        }
      ],
      "topologies": [
        {
          "networks": [
            "romana-network"
          ],
          "map": [
            { "name": "host-group-01", "groups": [] },
            { "name": "host-group-02", "groups": [] },
            { "name": "host-group-03", "groups": [] },
            { "name": "host-group-04", "groups": [] },
            { "name": "host-group-05", "groups": [] },
            { "name": "host-group-06", "groups": [] },
            { "name": "host-group-07", "groups": [] },
            { "name": "host-group-08", "groups": [] }
          ]
        }
      ]
    }

---

apiVersion: v1
kind: Service
metadata:
  name: romana-etcd
  namespace: kube-system
spec:
  clusterIP: {{ k8s_service_romana_etcd }}
  ports:
  - name: etcd
    port: 12379
    protocol: TCP
    targetPort: 12379
  selector:
    romana-app: etcd
  sessionAffinity: None
  type: ClusterIP

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: romana-etcd
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        romana-app: etcd
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: "true"
      hostNetwork: true
      securityContext:
        seLinuxOptions:
          type: spc_t
      tolerations:
        # Allow the pod to run on the master.  This is required for
        # the master to communicate with pods.
        - key: node-role.kubernetes.io/master
          value: "true"
          effect: NoSchedule
        # Mark the pod as a critical add-on for rescheduling.
        - key: "CriticalAddonsOnly"
          operator: "Exists"
      containers:
      - name: romana-etcd
        image: {{ k8s_romana_etcd }}:{{ k8s_romana_etcd_tag }}
        command:
        - etcd
        - "--listen-client-urls=http://0.0.0.0:12379"
        - "--listen-peer-urls=http://127.0.0.1:12380"
        - "--advertise-client-urls=http://{{ k8s_service_romana_etcd }}:12379"
        - "--data-dir=/var/lib/etcd"
        volumeMounts:
        - name: etcd-data
          mountPath: "/var/lib/etcd"
        livenessProbe:
          httpGet:
            path: "/health"
            port: 12379
            host: 127.0.0.1
          initialDelaySeconds: 15
          timeoutSeconds: 15
      volumes:
      - name: etcd-data
        hostPath:
          path: {{ k8s_romana_etcd_dir }}

---

apiVersion: v1
kind: Service
metadata:
  name: romana
  namespace: kube-system
spec:
  clusterIP: {{ k8s_service_romana_daemon }}
  ports:
  - name: daemon
    port: 9600
    protocol: TCP
    targetPort: 9600
  selector:
    romana-app: daemon
  sessionAffinity: None
  type: ClusterIP

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: romana-daemon
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        romana-app: daemon
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: "true"
      hostNetwork: true
      tolerations:
        # Allow the pod to run on the master.  This is required for
        # the master to communicate with pods.
        - key: node-role.kubernetes.io/master
          value: "true"
          effect: NoSchedule
        # Mark the pod as a critical add-on for rescheduling.
        - key: "CriticalAddonsOnly"
          operator: "Exists"
      containers:
      - name: romana-daemon
        image: {{ k8s_romana_daemon }}:{{ k8s_romana_daemon_tag }}
        imagePullPolicy: Always
        args:
        - --initial-network=/etc/romana/daemon/network.json
        volumeMounts:
        - name: config-volume
          mountPath: /etc/romana/daemon
      volumes:
      # consume the file-like keys of the configmap via volume plugin
      - name: config-volume
        configMap:
          name: romama-config
          items:
          - key: network_config
            path: network.json

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: romana-listener
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        romana-app: listener
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: "true"
      hostNetwork: true
      serviceAccountName: romana-listener
      tolerations:
        # Allow the pod to run on the master.  This is required for
        # the master to communicate with pods.
        - key: node-role.kubernetes.io/master
          value: "true"
          effect: NoSchedule
        # Mark the pod as a critical add-on for rescheduling.
        - key: "CriticalAddonsOnly"
          operator: "Exists"
      containers:
      - name: romana-listener
        image: {{ k8s_romana_listener }}:{{ k8s_romana_listener_tag }}
        imagePullPolicy: Always

---

apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: romana-agent
  namespace: kube-system
  labels:
    k8s-app: romana
spec:
  template:
    metadata:
      labels:
        romana-app: agent
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      securityContext:
        seLinuxOptions:
          type: spc_t
      serviceAccountName: romana-agent
      tolerations:
        # Allow the pod to run on the master.  This is required for
        # the master to communicate with pods.
        - key: node-role.kubernetes.io/master
          value: "true"
          effect: NoSchedule
        # Mark the pod as a critical add-on for rescheduling.
        - key: "CriticalAddonsOnly"
          operator: "Exists"
      containers:
      - name: romana-agent
        image: {{ k8s_romana_agent }}:{{ k8s_romana_agent_tag }}
        imagePullPolicy: Always
        args:
        - --service-cluster-ip-range={{ k8s_services_network }}
        env:
        - name: NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: true
        volumeMounts:
        - name: host-usr-local-bin
          mountPath: /host/usr/local/bin
        - name: host-etc-romana
          mountPath: /host/etc/romana
        - name: host-cni-bin
          mountPath: /host/opt/cni/bin
        - name: host-cni-net-d
          mountPath: /host/etc/cni/net.d
        - name: run-path
          mountPath: /var/run/romana
      volumes:
      - name: host-usr-local-bin
        hostPath:
          path: /usr/local/bin
      - name: host-etc-romana
        hostPath:
          path: /etc/romana
      - name: host-cni-bin
        hostPath:
          path: {{ cni_bin_dir }}
      - name: host-cni-net-d
        hostPath:
          path: {{ cni_conf_dir }}
      - name: run-path
        hostPath:
          path: /var/run/romana
