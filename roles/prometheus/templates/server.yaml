---
# Source: prometheus/templates/server-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
    release: prometheus-{{ k8s_prometheus_image_tag }}
    component: "server"
  namespace: {{ k8s_prometheus_namespace }}
  name: prometheus-server
data:
  alerts: |-
{% include 'alerts/common.conf' %}

  prometheus.yml: |-
    # Rule files specifies a list of globs. Rules and alerts are read from
    # all matching files.
    rule_files:
      - /etc/config/alerts

    # A list of scrape configurations.
    scrape_configs:
{% include 'scrape_configs/prometheus.yml' %}

{% include 'scrape_configs/kubernetes.yml' %}

{% include 'scrape_configs/istio.yml' %}

---
# Source: prometheus/templates/server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: prometheus
    release: prometheus-{{ k8s_prometheus_image_tag }}
    component: "server"
  namespace: {{ k8s_prometheus_namespace }}
  name: prometheus-server

---
# Source: prometheus/templates/server-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: prometheus
    release: prometheus-{{ k8s_prometheus_image_tag }}
    component: "server"
  name: prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get

---
# Source: prometheus/templates/server-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: prometheus
    release: prometheus-{{ k8s_prometheus_image_tag }}
    component: "server"
  namespace: {{ k8s_prometheus_namespace }}
  name: prometheus-server
subjects:
  - kind: ServiceAccount
    name: prometheus-server
    namespace: {{ k8s_prometheus_namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server

---
# Source: prometheus/templates/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
    release: prometheus-{{ k8s_prometheus_image_tag }}
    component: "server"
  namespace: {{ k8s_prometheus_namespace }}
  name: prometheus-server
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app: prometheus
    component: "server"
  type: "ClusterIP"

---
# Source: prometheus/templates/server-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: prometheus
    release: prometheus-{{ k8s_prometheus_image_tag }}
    component: "server"
  namespace: {{ k8s_prometheus_namespace }}
  name: prometheus-server
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
        component: "server"
    spec:
      serviceAccountName: prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "{{ k8s_prometheus_configreload_image }}:{{ k8s_prometheus_configreload_image_tag }}"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:9090/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
        - name: prometheus-server
          image: "{{ k8s_prometheus_image }}:{{ k8s_prometheus_image_tag }}"
          imagePullPolicy: "IfNotPresent"
          args:
            - --alertmanager.url=http://prometheus-alertmanager:80
            - --config.file=/etc/config/prometheus.yml
            - --storage.local.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /status
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-server
        - name: storage-volume
          emptyDir: {}
{% if k8s_prometheus_name is defined and k8s_prometheus_name != '' %}
---
# Source: prometheus/templates/server-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    app: prometheus
    release: prometheus-{{ k8s_prometheus_image_tag }}
    component: "server"
  namespace: {{ k8s_prometheus_namespace }}
  name: prometheus-server
spec:
  rules:
    - host: {{ k8s_prometheus_name }}
      http:
        paths:
          - backend:
              serviceName: prometheus-server
              servicePort: 80
  tls:
    - hosts:
      - {{ k8s_prometheus_name }}
      secretName: tls-secret
{% endif %}

